import com.google.firebase.auth.FirebaseAuthException
import com.google.firebase.auth.ktx.auth
import com.google.firebase.ktx.Firebase
import kotlinx.coroutines.Dispatchers.IO
import kotlinx.coroutines.tasks.await
import kotlinx.coroutines.withContext

class RegisterRepository {
    suspend fun register(email: String, password: String): Unit = withContext(IO) {
        Firebase.auth.createUserWithEmailAndPassword(email, password).await()
    }

    fun signOut() = Firebase.auth.signOut()
    
    suspend fun login(email: String, password: String):DataOrExceptionMessageList<Any, Exception> {
        val dataOrExceptionMessageList = DataOrExceptionMessageList<Any, Exception>()
        try {
            dataOrExceptionMessageList.data =
                Firebase.auth.signInWithEmailAndPassword(email, password)
                    .await()
        } catch (e: FirebaseAuthException) {
            dataOrExceptionMessageList.e = e
        }
        return dataOrExceptionMessageList
    }

}

data class DataOrExceptionMessageList<T, E : Exception?>(
    var data: T? = null,
    var e: E? = null
)
