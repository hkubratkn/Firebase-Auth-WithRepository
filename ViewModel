import android.util.Log
import android.widget.Toast
import androidx.lifecycle.*
import com.google.firebase.auth.ktx.auth
import com.google.firebase.ktx.Firebase
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.launch
import java.lang.IllegalArgumentException
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope

class RegisterViewModel(
    private val registerRepository: RegisterRepository
): ViewModel() {

    private val _loading = MutableLiveData(false)
    val loading: LiveData<Boolean> = _loading

    private val _signedIn = MutableLiveData(false)
    val signedIn: LiveData<Boolean> = _signedIn

    private val _error = MutableLiveData<String?>(null)
    val error: LiveData<String?> = _error

    fun removeError() {
        _error.value = null
    }

    fun signUp(email: String, password: String) = viewModelScope.launch {
        try {
            _loading.postValue(true)
            registerRepository.register(email, password)
            _signedIn.postValue(true)
        } catch (e: Exception) {
            _error.postValue(e.localizedMessage)
        } finally {
            _loading.postValue(false)
        }
    }

    fun signOut() {
        registerRepository.signOut()
        _signedIn.postValue(false)
    }

    val loading = mutableStateOf(false)
    val data: MutableState<DataOrExceptionMessageList<Any, Exception>> = mutableStateOf(
        DataOrExceptionMessageList(
            Any(),
            Exception("")
        )
    )

    fun login(email: String, password: String) {
        viewModelScope.launch {
            loading.value = true
            data.value = registerRepository.login(email, password)
            loading.value = false
        }
    }

}
